
- name: Install required base packages
  dnf:
    name:
      - python3-virtualenv
    state: latest
    skip_broken: yes
  become: True

- name: Get a list of current VM definitions
  virt:
    command: list_vms
  register: vm_list

- name: Check if base RHEL/CentOS 8 already disk image exists
  stat:
    path: /var/lib/libvirt/images/centos8-kvm.qcow2
  register: base_result

- name: Build Bastion VM definition for SNO ISO Install
  ansible.builtin.command: >
    virt-install --virt-type kvm --boot uefi --ram {{ vms.bastion.mem }} --vcpus {{ vms.bastion.cpus }} --cpu=host-passthrough --os-variant rhel8.1
    --disk path=/var/lib/libvirt/images/ocp4-bastion.qcow2,device=disk,bus=virtio,format=qcow2
    --network network:ocp4-net,mac={{ vms.bastion.base_network }}
    --boot hd --noautoconsole --vnc --name ocp4-bastion --noreboot
  when:
    - bastion_defined.rc == 1
    - ocp4_aio_deploy_type == "sno"

- name: Check if firewalld is available
  ansible.builtin.command: systemctl status firewalld
  register: firewalld_avail
  failed_when: firewalld_avail.rc == 1

- name: Enable firewalld for IPI deployments
  ansible.builtin.systemd:
    name: firewalld
    enabled: yes
    state: started
  when:
    - firewalld_avail.rc < 4

- name: Enable firewalld ports for IPI deployments
  firewalld:
    port: 6230-6236/udp
    zone: libvirt
    permanent: yes
    state: enabled
  when:
    - firewalld_avail.rc != 4

- name: Enable port 9001 forwarding to bastion:9001 with firewalld
  firewalld:
    port_forward:
      port: "9001"
      proto: tcp
      toaddr: 192.168.123.100
      toport: "9001"
    zone: public
    permanent: yes
    state: enabled
  when:
    - firewalld_avail.rc != 4

- name: Enable port 8000 forwarding to bastion:22 with firewalld
  firewalld:
    port_forward:
      port: "8000"
      proto: tcp
      toaddr: 192.168.123.100
      toport: "22"
    zone: public
    permanent: yes
    state: enabled
  when:
    - firewalld_avail.rc != 4

- name: Iptables flush libvirt forward filter
  ansible.builtin.iptables:
    chain: "{{ item }}"
    flush: yes
  with_items:  [ 'LIBVIRT_FWO', 'LIBVIRT_FWI' ]
  become: true
  when:
    - firewalld_avail.rc == 4

- name: create default libvirt forward out rules
  ansible.builtin.iptables:
    chain: LIBVIRT_FWO
    protocol: all
    source: 192.168.123.0/24
    jump: ACCEPT
    action: insert
    rule_num: 1

- name: create default libvirt forward in rules
  ansible.builtin.iptables:
    chain: LIBVIRT_FWI
    protocol: all
    destination: 192.168.123.0/24
    jump: ACCEPT
    action: insert
    rule_num: 1

- name: Enable iptables ports for IPI deployments
  ansible.builtin.iptables:
    chain: LIBVIRT_INP
    protocol: udp
    destination_port: "6230:6236"
    jump: ACCEPT
  when:
    - firewalld_avail.rc == 4

- name: Enable port 9001 on host with iptables
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    action: insert
    rule_num: "1"
    destination_port: "9001"
    jump: ACCEPT
  when: firewalld_avail.rc == 4

- name: Forward port 9001 to bastion:9001 with iptables
  ansible.builtin.iptables:
    action: insert
    rule_num: "1"
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "9001"
    jump: DNAT
    to_destination: 192.168.123.100:9001
  when: firewalld_avail.rc == 4   

- name: Enable port 8000 on host with iptables
  ansible.builtin.iptables:
    chain: FORWARD
    protocol: tcp
    action: insert
    rule_num: "1"
    destination_port: "8000"
    jump: ACCEPT
  when: firewalld_avail.rc == 4

- name: Forward port 8000 to bastion:22 with iptables
  ansible.builtin.iptables:
    action: insert
    rule_num: "1"
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "8000"
    jump: DNAT
    to_destination: 192.168.123.100:22
  when: firewalld_avail.rc == 4   

- name: Forward port 3128 to bastion:3128 with iptables
  ansible.builtin.iptables:
    action: insert
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "3128"
    jump: DNAT
    to_destination: 192.168.123.100:3128
  when: firewalld_avail.rc == 4

- name: Forward port 80 to apps_vip:80 with iptables
  ansible.builtin.iptables:
    action: insert
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "80"
    jump: DNAT
    to_destination: 192.168.123.10:80
  when: firewalld_avail.rc == 4

- name: Forward port 443 to apps_vip:443 with iptables
  ansible.builtin.iptables:
    action: insert
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "443"
    jump: DNAT
    to_destination: 192.168.123.10:443
  when: firewalld_avail.rc == 4

- name: Forward port 6443 to api_vip:6443 with iptables
  ansible.builtin.iptables:
    action: insert
    table: nat
    chain: PREROUTING
    protocol: tcp
    match: tcp
    destination: "{{ aio_host_ip_address }}"
    destination_port: "6443"
    jump: DNAT
    to_destination: 192.168.123.10:6443
  when: firewalld_avail.rc == 4


- name: Make lab directory
  ansible.builtin.file:
    path: /root/lab
    state: directory

- name: Make sno directory 
  ansible.builtin.file:
    path: /root/sno-{{ item }}
    state: directory
  loop:
    - rhacm
    - edge1
    - edge2

- name: Make sno image directory 
  ansible.builtin.file:
    path: /var/lib/libvirt/images/sno-{{ item }}
    state: directory
    owner: qemu
    group: qemu
  loop:
    - rhacm
    - edge1
    - edge2

- name: Download OpenShift Client
  ansible.builtin.get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp4_aio_ocp_version }}/openshift-client-linux.tar.gz
    dest: /root
    mode: 0644

- name: Download OpenShift Installer
  ansible.builtin.get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp4_aio_ocp_version }}/openshift-install-linux.tar.gz
    dest: /root
    mode: 0644

- name: Unpack OpenShift Client & Installer
  ansible.builtin.unarchive:
    remote_src: yes
    src: "{{ item }}"
    dest: /usr/bin
  loop:
    - "/root/openshift-install-linux.tar.gz"
    - "/root/openshift-client-linux.tar.gz"

- name: Remove OpenShift client and installer tarballs
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/root/openshift-install-linux.tar.gz"
    - "/root/openshift-client-linux.tar.gz"

- name: Set DNS Server to bastion host
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    insertbefore: '^nameserver.*'
    line: "nameserver 192.168.123.100"
    firstmatch: yes
